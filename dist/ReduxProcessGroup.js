"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReduxProcessGroup = void 0;
class ReduxProcessGroup {
    constructor(groupName, options) {
        this.groupName = groupName;
        this.options = options;
    }
    getDefaultState() {
        return this.options.defaultState;
    }
    setErrorHandler(cb) {
        this.errorHandler = cb;
    }
    execute(CustomReduxProcess, form = null) {
        if (!this.options.processes.includes(CustomReduxProcess)) {
            throw new Error('Attempting to execute an ReduxProcess that is not a part of this ReduxProcessGroup. This action is illegal.');
        }
        return async (dispatch, getState) => {
            const store = getState();
            const action = new CustomReduxProcess(this.getReduxProcessOptions(store));
            let result;
            try {
                result = await action.performAction(form, store);
                dispatch({
                    type: this.getFormattedActionType(CustomReduxProcess.getProcessKey()),
                    payload: result
                });
                return result;
            }
            catch (e) {
                let error = e;
                if (this.errorHandler) {
                    const result = this.errorHandler(e);
                    if (result) {
                        error = result;
                    }
                }
                throw error;
            }
        };
    }
    getReducer() {
        return (state, action) => {
            if (state === undefined) {
                state = this.options.defaultState;
            }
            for (const ProcessClass of this.options.processes) {
                const possibleActionType = this.getFormattedActionType(ProcessClass.getProcessKey());
                if (action.type === possibleActionType) {
                    const process = new ProcessClass(this.getReduxProcessOptions());
                    return process.getNewState(action.payload, state);
                }
            }
            return state;
        };
    }
    getFormattedActionType(key) {
        return `@redux-process-group/${this.groupName.toLowerCase()}/${key.toLowerCase()}`;
    }
    getReduxProcessOptions(_) {
        return {};
    }
}
exports.ReduxProcessGroup = ReduxProcessGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVkdXhQcm9jZXNzR3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvUmVkdXhQcm9jZXNzR3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBT0EsTUFBYSxpQkFBaUI7SUFNNUIsWUFDRSxTQUFpQixFQUNqQixPQUFvRDtRQUVwRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtRQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtJQUN4QixDQUFDO0lBRUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUE7SUFDbEMsQ0FBQztJQUVELGVBQWUsQ0FBQyxFQUFnQjtRQUM5QixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQTtJQUN4QixDQUFDO0lBRUQsT0FBTyxDQUNMLGtCQUtDLEVBQ0QsT0FBb0IsSUFBSTtRQU94QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDeEQsTUFBTSxJQUFJLEtBQUssQ0FDYiw2R0FBNkcsQ0FDOUcsQ0FBQTtTQUNGO1FBRUQsT0FBTyxLQUFLLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQ2xDLE1BQU0sS0FBSyxHQUFHLFFBQVEsRUFBRSxDQUFBO1lBQ3hCLE1BQU0sTUFBTSxHQUFHLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7WUFFekUsSUFBSSxNQUE0QyxDQUFBO1lBQ2hELElBQUk7Z0JBQ0YsTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7Z0JBQ2hELFFBQVEsQ0FBQztvQkFDUCxJQUFJLEVBQUUsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxDQUFDO29CQUNyRSxPQUFPLEVBQUUsTUFBTTtpQkFDaEIsQ0FBQyxDQUFBO2dCQUNGLE9BQU8sTUFBTSxDQUFBO2FBQ2Q7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDVixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUE7Z0JBQ2IsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO29CQUNyQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBO29CQUNuQyxJQUFJLE1BQU0sRUFBRTt3QkFDVixLQUFLLEdBQUcsTUFBTSxDQUFBO3FCQUNmO2lCQUNGO2dCQUNELE1BQU0sS0FBSyxDQUFBO2FBQ1o7UUFDSCxDQUFDLENBQUE7SUFDSCxDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDdkIsSUFBSSxLQUFLLEtBQUssU0FBUyxFQUFFO2dCQUN2QixLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUE7YUFDbEM7WUFFRCxLQUFLLE1BQU0sWUFBWSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO2dCQUNqRCxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FDcEQsWUFBWSxDQUFDLGFBQWEsRUFBRSxDQUM3QixDQUFBO2dCQUVELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxrQkFBa0IsRUFBRTtvQkFDdEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQTtvQkFDL0QsT0FBTyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUE7aUJBQ2xEO2FBQ0Y7WUFFRCxPQUFPLEtBQUssQ0FBQTtRQUNkLENBQUMsQ0FBQTtJQUNILENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxHQUFXO1FBQ2hDLE9BQU8sd0JBQXdCLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLElBQUksR0FBRyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUE7SUFDcEYsQ0FBQztJQUVELHNCQUFzQixDQUFDLENBQWU7UUFDcEMsT0FBTyxFQUFFLENBQUE7SUFDWCxDQUFDO0NBQ0Y7QUEvRkQsOENBK0ZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVGh1bmtBY3Rpb24gfSBmcm9tICdyZWR1eC10aHVuaydcbmltcG9ydCB7IFJlZHVjZXIgfSBmcm9tICdyZWR1eCdcbmltcG9ydCB7IElSZWR1eFByb2Nlc3NDbGFzcyB9IGZyb20gJy4vaW50ZXJmYWNlcy9JUmVkdXhQcm9jZXNzJ1xuaW1wb3J0IHsgSVJlZHV4UHJvY2Vzc0dyb3VwIH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lSZWR1eFByb2Nlc3NHcm91cCdcbmltcG9ydCB7IFJlZHV4UHJvY2Vzc0FjdGlvbiwgUmVkdXhQcm9jZXNzT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMvUmVkdXhQcm9jZXNzJ1xuaW1wb3J0IHsgUmVkdXhQcm9jZXNzR3JvdXBPcHRpb25zLCBFcnJvckhhbmRsZXIgfSBmcm9tICcuL3R5cGVzL1JlZHV4UHJvY2Vzc0dyb3VwJ1xuXG5leHBvcnQgY2xhc3MgUmVkdXhQcm9jZXNzR3JvdXA8UHJvY2Vzc0dyb3VwU3RhdGUsIEdsb2JhbFN0YXRlPlxuICBpbXBsZW1lbnRzIElSZWR1eFByb2Nlc3NHcm91cDxQcm9jZXNzR3JvdXBTdGF0ZSwgR2xvYmFsU3RhdGU+IHtcbiAgZ3JvdXBOYW1lOiBzdHJpbmdcbiAgb3B0aW9uczogUmVkdXhQcm9jZXNzR3JvdXBPcHRpb25zPFByb2Nlc3NHcm91cFN0YXRlPlxuICBwcm90ZWN0ZWQgZXJyb3JIYW5kbGVyPzogRXJyb3JIYW5kbGVyXG5cbiAgY29uc3RydWN0b3IoXG4gICAgZ3JvdXBOYW1lOiBzdHJpbmcsXG4gICAgb3B0aW9uczogUmVkdXhQcm9jZXNzR3JvdXBPcHRpb25zPFByb2Nlc3NHcm91cFN0YXRlPlxuICApIHtcbiAgICB0aGlzLmdyb3VwTmFtZSA9IGdyb3VwTmFtZVxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgfVxuXG4gIGdldERlZmF1bHRTdGF0ZSgpOiBQcm9jZXNzR3JvdXBTdGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5kZWZhdWx0U3RhdGVcbiAgfVxuXG4gIHNldEVycm9ySGFuZGxlcihjYjogRXJyb3JIYW5kbGVyKSB7XG4gICAgdGhpcy5lcnJvckhhbmRsZXIgPSBjYlxuICB9XG5cbiAgZXhlY3V0ZTxGb3JtLCBQYXlsb2FkVmFsdWU+KFxuICAgIEN1c3RvbVJlZHV4UHJvY2VzczogSVJlZHV4UHJvY2Vzc0NsYXNzPFxuICAgICAgRm9ybSxcbiAgICAgIFBheWxvYWRWYWx1ZSxcbiAgICAgIFByb2Nlc3NHcm91cFN0YXRlLFxuICAgICAgR2xvYmFsU3RhdGVcbiAgICA+LFxuICAgIGZvcm06IEZvcm0gfCBudWxsID0gbnVsbFxuICApOiBUaHVua0FjdGlvbjxcbiAgICBQcm9taXNlPFBheWxvYWRWYWx1ZT4sXG4gICAgR2xvYmFsU3RhdGUsXG4gICAgdW5rbm93bixcbiAgICBSZWR1eFByb2Nlc3NBY3Rpb248UGF5bG9hZFZhbHVlPlxuICA+IHtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5wcm9jZXNzZXMuaW5jbHVkZXMoQ3VzdG9tUmVkdXhQcm9jZXNzKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnQXR0ZW1wdGluZyB0byBleGVjdXRlIGFuIFJlZHV4UHJvY2VzcyB0aGF0IGlzIG5vdCBhIHBhcnQgb2YgdGhpcyBSZWR1eFByb2Nlc3NHcm91cC4gVGhpcyBhY3Rpb24gaXMgaWxsZWdhbC4nXG4gICAgICApXG4gICAgfVxuXG4gICAgcmV0dXJuIGFzeW5jIChkaXNwYXRjaCwgZ2V0U3RhdGUpID0+IHtcbiAgICAgIGNvbnN0IHN0b3JlID0gZ2V0U3RhdGUoKVxuICAgICAgY29uc3QgYWN0aW9uID0gbmV3IEN1c3RvbVJlZHV4UHJvY2Vzcyh0aGlzLmdldFJlZHV4UHJvY2Vzc09wdGlvbnMoc3RvcmUpKVxuXG4gICAgICBsZXQgcmVzdWx0OiBQYXlsb2FkVmFsdWUgfCBQcm9taXNlPFBheWxvYWRWYWx1ZT5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJlc3VsdCA9IGF3YWl0IGFjdGlvbi5wZXJmb3JtQWN0aW9uKGZvcm0sIHN0b3JlKVxuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogdGhpcy5nZXRGb3JtYXR0ZWRBY3Rpb25UeXBlKEN1c3RvbVJlZHV4UHJvY2Vzcy5nZXRQcm9jZXNzS2V5KCkpLFxuICAgICAgICAgIHBheWxvYWQ6IHJlc3VsdFxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGxldCBlcnJvciA9IGVcbiAgICAgICAgaWYgKHRoaXMuZXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5lcnJvckhhbmRsZXIoZSlcbiAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICBlcnJvciA9IHJlc3VsdFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvclxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFJlZHVjZXIoKTogUmVkdWNlcjxQcm9jZXNzR3JvdXBTdGF0ZSwgUmVkdXhQcm9jZXNzQWN0aW9uPGFueT4+IHtcbiAgICByZXR1cm4gKHN0YXRlLCBhY3Rpb24pID0+IHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0YXRlID0gdGhpcy5vcHRpb25zLmRlZmF1bHRTdGF0ZVxuICAgICAgfVxuXG4gICAgICBmb3IgKGNvbnN0IFByb2Nlc3NDbGFzcyBvZiB0aGlzLm9wdGlvbnMucHJvY2Vzc2VzKSB7XG4gICAgICAgIGNvbnN0IHBvc3NpYmxlQWN0aW9uVHlwZSA9IHRoaXMuZ2V0Rm9ybWF0dGVkQWN0aW9uVHlwZShcbiAgICAgICAgICBQcm9jZXNzQ2xhc3MuZ2V0UHJvY2Vzc0tleSgpXG4gICAgICAgIClcblxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09IHBvc3NpYmxlQWN0aW9uVHlwZSkge1xuICAgICAgICAgIGNvbnN0IHByb2Nlc3MgPSBuZXcgUHJvY2Vzc0NsYXNzKHRoaXMuZ2V0UmVkdXhQcm9jZXNzT3B0aW9ucygpKVxuICAgICAgICAgIHJldHVybiBwcm9jZXNzLmdldE5ld1N0YXRlKGFjdGlvbi5wYXlsb2FkLCBzdGF0ZSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3RhdGVcbiAgICB9XG4gIH1cblxuICBnZXRGb3JtYXR0ZWRBY3Rpb25UeXBlKGtleTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYEByZWR1eC1wcm9jZXNzLWdyb3VwLyR7dGhpcy5ncm91cE5hbWUudG9Mb3dlckNhc2UoKX0vJHtrZXkudG9Mb3dlckNhc2UoKX1gXG4gIH1cblxuICBnZXRSZWR1eFByb2Nlc3NPcHRpb25zKF8/OiBHbG9iYWxTdGF0ZSk6IFJlZHV4UHJvY2Vzc09wdGlvbnMge1xuICAgIHJldHVybiB7fVxuICB9XG59XG4iXX0=