"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReduxProcessGroup = void 0;
class ReduxProcessGroup {
    constructor(groupName, options) {
        this.groupName = groupName;
        this.options = options;
    }
    getDefaultState() {
        return this.options.defaultState;
    }
    execute(CustomReduxProcess, form = null) {
        if (!this.options.processes.includes(CustomReduxProcess)) {
            throw new Error('Attempting to execute an ReduxProcess that is not a part of this ReduxProcessGroup. This action is illegal.');
        }
        return async (dispatch, getState) => {
            const store = getState();
            const action = new CustomReduxProcess(this.getReduxProcessOptions(store));
            const result = await action.performAction(form, store);
            dispatch({
                type: this.getFormattedActionType(CustomReduxProcess.getProcessKey()),
                payload: result
            });
            return result;
        };
    }
    getReducer() {
        return (state, action) => {
            if (state === undefined) {
                state = this.options.defaultState;
            }
            for (const ProcessClass of this.options.processes) {
                const possibleActionType = this.getFormattedActionType(ProcessClass.getProcessKey());
                if (action.type === possibleActionType) {
                    const process = new ProcessClass(this.getReduxProcessOptions());
                    return process.getNewState(action.payload, state);
                }
            }
            return state;
        };
    }
    getFormattedActionType(key) {
        return `@redux-process-group/${this.groupName.toLowerCase()}/${key.toLowerCase()}`;
    }
    getReduxProcessOptions(_) {
        return {};
    }
}
exports.ReduxProcessGroup = ReduxProcessGroup;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVkdXhQcm9jZXNzR3JvdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvUmVkdXhQcm9jZXNzR3JvdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBT0EsTUFBYSxpQkFBaUI7SUFLNUIsWUFDRSxTQUFpQixFQUNqQixPQUFvRDtRQUVwRCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQTtRQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtJQUN4QixDQUFDO0lBRUQsZUFBZTtRQUNiLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUE7SUFDbEMsQ0FBQztJQUVELE9BQU8sQ0FDTCxrQkFLQyxFQUNELE9BQW9CLElBQUk7UUFPeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFO1lBQ3hELE1BQU0sSUFBSSxLQUFLLENBQ2IsNkdBQTZHLENBQzlHLENBQUE7U0FDRjtRQUVELE9BQU8sS0FBSyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBRyxRQUFRLEVBQUUsQ0FBQTtZQUN4QixNQUFNLE1BQU0sR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1lBRXpFLE1BQU0sTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUE7WUFFdEQsUUFBUSxDQUFDO2dCQUNQLElBQUksRUFBRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsa0JBQWtCLENBQUMsYUFBYSxFQUFFLENBQUM7Z0JBQ3JFLE9BQU8sRUFBRSxNQUFNO2FBQ2hCLENBQUMsQ0FBQTtZQUVGLE9BQU8sTUFBTSxDQUFBO1FBQ2YsQ0FBQyxDQUFBO0lBQ0gsQ0FBQztJQUVELFVBQVU7UUFDUixPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3ZCLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtnQkFDdkIsS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFBO2FBQ2xDO1lBRUQsS0FBSyxNQUFNLFlBQVksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRTtnQkFDakQsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQ3BELFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FDN0IsQ0FBQTtnQkFFRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssa0JBQWtCLEVBQUU7b0JBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLENBQUE7b0JBQy9ELE9BQU8sT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFBO2lCQUNsRDthQUNGO1lBRUQsT0FBTyxLQUFLLENBQUE7UUFDZCxDQUFDLENBQUE7SUFDSCxDQUFDO0lBRUQsc0JBQXNCLENBQUMsR0FBVztRQUNoQyxPQUFPLHdCQUF3QixJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxJQUFJLEdBQUcsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFBO0lBQ3BGLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxDQUFlO1FBQ3BDLE9BQU8sRUFBRSxDQUFBO0lBQ1gsQ0FBQztDQUNGO0FBaEZELDhDQWdGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRodW5rQWN0aW9uIH0gZnJvbSAncmVkdXgtdGh1bmsnXG5pbXBvcnQgeyBSZWR1Y2VyIH0gZnJvbSAncmVkdXgnXG5pbXBvcnQgeyBJUmVkdXhQcm9jZXNzQ2xhc3MgfSBmcm9tICcuL2ludGVyZmFjZXMvSVJlZHV4UHJvY2VzcydcbmltcG9ydCB7IElSZWR1eFByb2Nlc3NHcm91cCB9IGZyb20gJy4vaW50ZXJmYWNlcy9JUmVkdXhQcm9jZXNzR3JvdXAnXG5pbXBvcnQgeyBSZWR1eFByb2Nlc3NBY3Rpb24sIFJlZHV4UHJvY2Vzc09wdGlvbnMgfSBmcm9tICcuL3R5cGVzL1JlZHV4UHJvY2VzcydcbmltcG9ydCB7IFJlZHV4UHJvY2Vzc0dyb3VwT3B0aW9ucyB9IGZyb20gJy4vdHlwZXMvUmVkdXhQcm9jZXNzR3JvdXAnXG5cbmV4cG9ydCBjbGFzcyBSZWR1eFByb2Nlc3NHcm91cDxQcm9jZXNzR3JvdXBTdGF0ZSwgR2xvYmFsU3RhdGU+XG4gIGltcGxlbWVudHMgSVJlZHV4UHJvY2Vzc0dyb3VwPFByb2Nlc3NHcm91cFN0YXRlLCBHbG9iYWxTdGF0ZT4ge1xuICBncm91cE5hbWU6IHN0cmluZ1xuICBvcHRpb25zOiBSZWR1eFByb2Nlc3NHcm91cE9wdGlvbnM8UHJvY2Vzc0dyb3VwU3RhdGU+XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZ3JvdXBOYW1lOiBzdHJpbmcsXG4gICAgb3B0aW9uczogUmVkdXhQcm9jZXNzR3JvdXBPcHRpb25zPFByb2Nlc3NHcm91cFN0YXRlPlxuICApIHtcbiAgICB0aGlzLmdyb3VwTmFtZSA9IGdyb3VwTmFtZVxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnNcbiAgfVxuXG4gIGdldERlZmF1bHRTdGF0ZSgpOiBQcm9jZXNzR3JvdXBTdGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5kZWZhdWx0U3RhdGVcbiAgfVxuXG4gIGV4ZWN1dGU8Rm9ybSwgUGF5bG9hZFZhbHVlPihcbiAgICBDdXN0b21SZWR1eFByb2Nlc3M6IElSZWR1eFByb2Nlc3NDbGFzczxcbiAgICAgIEZvcm0sXG4gICAgICBQYXlsb2FkVmFsdWUsXG4gICAgICBQcm9jZXNzR3JvdXBTdGF0ZSxcbiAgICAgIEdsb2JhbFN0YXRlXG4gICAgPixcbiAgICBmb3JtOiBGb3JtIHwgbnVsbCA9IG51bGxcbiAgKTogVGh1bmtBY3Rpb248XG4gICAgUHJvbWlzZTxQYXlsb2FkVmFsdWU+LFxuICAgIEdsb2JhbFN0YXRlLFxuICAgIHVua25vd24sXG4gICAgUmVkdXhQcm9jZXNzQWN0aW9uPFBheWxvYWRWYWx1ZT5cbiAgPiB7XG4gICAgaWYgKCF0aGlzLm9wdGlvbnMucHJvY2Vzc2VzLmluY2x1ZGVzKEN1c3RvbVJlZHV4UHJvY2VzcykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0F0dGVtcHRpbmcgdG8gZXhlY3V0ZSBhbiBSZWR1eFByb2Nlc3MgdGhhdCBpcyBub3QgYSBwYXJ0IG9mIHRoaXMgUmVkdXhQcm9jZXNzR3JvdXAuIFRoaXMgYWN0aW9uIGlzIGlsbGVnYWwuJ1xuICAgICAgKVxuICAgIH1cblxuICAgIHJldHVybiBhc3luYyAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG4gICAgICBjb25zdCBzdG9yZSA9IGdldFN0YXRlKClcbiAgICAgIGNvbnN0IGFjdGlvbiA9IG5ldyBDdXN0b21SZWR1eFByb2Nlc3ModGhpcy5nZXRSZWR1eFByb2Nlc3NPcHRpb25zKHN0b3JlKSlcblxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYWN0aW9uLnBlcmZvcm1BY3Rpb24oZm9ybSwgc3RvcmUpXG5cbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogdGhpcy5nZXRGb3JtYXR0ZWRBY3Rpb25UeXBlKEN1c3RvbVJlZHV4UHJvY2Vzcy5nZXRQcm9jZXNzS2V5KCkpLFxuICAgICAgICBwYXlsb2FkOiByZXN1bHRcbiAgICAgIH0pXG5cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gIH1cblxuICBnZXRSZWR1Y2VyKCk6IFJlZHVjZXI8UHJvY2Vzc0dyb3VwU3RhdGUsIFJlZHV4UHJvY2Vzc0FjdGlvbjxhbnk+PiB7XG4gICAgcmV0dXJuIChzdGF0ZSwgYWN0aW9uKSA9PiB7XG4gICAgICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBzdGF0ZSA9IHRoaXMub3B0aW9ucy5kZWZhdWx0U3RhdGVcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBQcm9jZXNzQ2xhc3Mgb2YgdGhpcy5vcHRpb25zLnByb2Nlc3Nlcykge1xuICAgICAgICBjb25zdCBwb3NzaWJsZUFjdGlvblR5cGUgPSB0aGlzLmdldEZvcm1hdHRlZEFjdGlvblR5cGUoXG4gICAgICAgICAgUHJvY2Vzc0NsYXNzLmdldFByb2Nlc3NLZXkoKVxuICAgICAgICApXG5cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSBwb3NzaWJsZUFjdGlvblR5cGUpIHtcbiAgICAgICAgICBjb25zdCBwcm9jZXNzID0gbmV3IFByb2Nlc3NDbGFzcyh0aGlzLmdldFJlZHV4UHJvY2Vzc09wdGlvbnMoKSlcbiAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5nZXROZXdTdGF0ZShhY3Rpb24ucGF5bG9hZCwgc3RhdGUpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0YXRlXG4gICAgfVxuICB9XG5cbiAgZ2V0Rm9ybWF0dGVkQWN0aW9uVHlwZShrZXk6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBAcmVkdXgtcHJvY2Vzcy1ncm91cC8ke3RoaXMuZ3JvdXBOYW1lLnRvTG93ZXJDYXNlKCl9LyR7a2V5LnRvTG93ZXJDYXNlKCl9YFxuICB9XG5cbiAgZ2V0UmVkdXhQcm9jZXNzT3B0aW9ucyhfPzogR2xvYmFsU3RhdGUpOiBSZWR1eFByb2Nlc3NPcHRpb25zIHtcbiAgICByZXR1cm4ge31cbiAgfVxufVxuIl19