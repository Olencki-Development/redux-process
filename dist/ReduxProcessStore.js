"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReduxProcessStore = void 0;
const redux_thunk_1 = __importDefault(require("redux-thunk"));
const redux_1 = require("redux");
class ReduxProcessStore {
    constructor(middlewares = []) {
        this.processes = {};
        const middleware = redux_1.applyMiddleware(redux_thunk_1.default, ...middlewares);
        this._internalReducer = this._internalReducer.bind(this);
        this.store = redux_1.createStore(this._internalReducer, middleware);
    }
    addProcessGroup(processGroup) {
        if (this.errorHandler) {
            processGroup.setErrorHandler(this.errorHandler);
        }
        this.processes[processGroup.groupName] = processGroup.getReducer();
        this._updateReducer();
        return this;
    }
    removeProcessGroup(processGroup) {
        delete this.processes[processGroup.groupName];
        this._updateReducer();
        return this;
    }
    setErrorHandler(cb) {
        this.errorHandler = cb;
    }
    _updateReducer() {
        const newReducer = redux_1.combineReducers(this.processes);
        this.store.replaceReducer(newReducer);
    }
    _internalReducer(state = {}) {
        return state;
    }
    getStore() {
        return this.store;
    }
}
exports.ReduxProcessStore = ReduxProcessStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVkdXhQcm9jZXNzU3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvUmVkdXhQcm9jZXNzU3RvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsOERBQStCO0FBQy9CLGlDQU1jO0FBTWQsTUFBYSxpQkFBaUI7SUFRNUIsWUFBWSxjQUFxQixFQUFFO1FBTnpCLGNBQVMsR0FHZixFQUFFLENBQUE7UUFJSixNQUFNLFVBQVUsR0FBRyx1QkFBZSxDQUFDLHFCQUFLLEVBQUUsR0FBRyxXQUFXLENBQUMsQ0FBQTtRQUN6RCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUN4RCxJQUFJLENBQUMsS0FBSyxHQUFHLG1CQUFXLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxDQUFBO0lBQzdELENBQUM7SUFFRCxlQUFlLENBQUMsWUFBMEM7UUFDeEQsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLFlBQVksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1NBQ2hEO1FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQ2xFLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUNyQixPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCxrQkFBa0IsQ0FBQyxZQUEwQztRQUMzRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQzdDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQTtRQUNyQixPQUFPLElBQUksQ0FBQTtJQUNiLENBQUM7SUFFRCxlQUFlLENBQUMsRUFBZ0I7UUFDOUIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUE7SUFDeEIsQ0FBQztJQUVELGNBQWM7UUFDWixNQUFNLFVBQVUsR0FBRyx1QkFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUNsRCxJQUFJLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN2QyxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBNkIsRUFBRTtRQUM5QyxPQUFPLEtBQUssQ0FBQTtJQUNkLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFBO0lBQ25CLENBQUM7Q0FDRjtBQTdDRCw4Q0E2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGh1bmsgZnJvbSAncmVkdXgtdGh1bmsnXG5pbXBvcnQge1xuICBTdG9yZSxcbiAgY3JlYXRlU3RvcmUsXG4gIGFwcGx5TWlkZGxld2FyZSxcbiAgY29tYmluZVJlZHVjZXJzLFxuICBSZWR1Y2VyXG59IGZyb20gJ3JlZHV4J1xuaW1wb3J0IHsgSVJlZHV4UHJvY2Vzc1N0b3JlIH0gZnJvbSAnLi9pbnRlcmZhY2VzL0lSZWR1eFByb2Nlc3NTdG9yZSdcbmltcG9ydCB7IElSZWR1eFByb2Nlc3NHcm91cCB9IGZyb20gJy4vaW50ZXJmYWNlcy9JUmVkdXhQcm9jZXNzR3JvdXAnXG5pbXBvcnQgeyBSZWR1eFByb2Nlc3NBY3Rpb24gfSBmcm9tICcuL3R5cGVzL1JlZHV4UHJvY2VzcydcbmltcG9ydCB7IEVycm9ySGFuZGxlciB9IGZyb20gJy4vdHlwZXMvUmVkdXhQcm9jZXNzR3JvdXAnXG5cbmV4cG9ydCBjbGFzcyBSZWR1eFByb2Nlc3NTdG9yZSBpbXBsZW1lbnRzIElSZWR1eFByb2Nlc3NTdG9yZSB7XG4gIHByb3RlY3RlZCBzdG9yZTogU3RvcmU8YW55LCBSZWR1eFByb2Nlc3NBY3Rpb248YW55Pj5cbiAgcHJvdGVjdGVkIHByb2Nlc3NlczogUmVjb3JkPFxuICAgIHN0cmluZyxcbiAgICBSZWR1Y2VyPGFueSwgUmVkdXhQcm9jZXNzQWN0aW9uPGFueT4+XG4gID4gPSB7fVxuICBwcm90ZWN0ZWQgZXJyb3JIYW5kbGVyPzogRXJyb3JIYW5kbGVyXG5cbiAgY29uc3RydWN0b3IobWlkZGxld2FyZXM6IGFueVtdID0gW10pIHtcbiAgICBjb25zdCBtaWRkbGV3YXJlID0gYXBwbHlNaWRkbGV3YXJlKHRodW5rLCAuLi5taWRkbGV3YXJlcylcbiAgICB0aGlzLl9pbnRlcm5hbFJlZHVjZXIgPSB0aGlzLl9pbnRlcm5hbFJlZHVjZXIuYmluZCh0aGlzKVxuICAgIHRoaXMuc3RvcmUgPSBjcmVhdGVTdG9yZSh0aGlzLl9pbnRlcm5hbFJlZHVjZXIsIG1pZGRsZXdhcmUpXG4gIH1cblxuICBhZGRQcm9jZXNzR3JvdXAocHJvY2Vzc0dyb3VwOiBJUmVkdXhQcm9jZXNzR3JvdXA8YW55LCBhbnk+KTogdGhpcyB7XG4gICAgaWYgKHRoaXMuZXJyb3JIYW5kbGVyKSB7XG4gICAgICBwcm9jZXNzR3JvdXAuc2V0RXJyb3JIYW5kbGVyKHRoaXMuZXJyb3JIYW5kbGVyKVxuICAgIH1cbiAgICB0aGlzLnByb2Nlc3Nlc1twcm9jZXNzR3JvdXAuZ3JvdXBOYW1lXSA9IHByb2Nlc3NHcm91cC5nZXRSZWR1Y2VyKClcbiAgICB0aGlzLl91cGRhdGVSZWR1Y2VyKClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgcmVtb3ZlUHJvY2Vzc0dyb3VwKHByb2Nlc3NHcm91cDogSVJlZHV4UHJvY2Vzc0dyb3VwPGFueSwgYW55Pik6IHRoaXMge1xuICAgIGRlbGV0ZSB0aGlzLnByb2Nlc3Nlc1twcm9jZXNzR3JvdXAuZ3JvdXBOYW1lXVxuICAgIHRoaXMuX3VwZGF0ZVJlZHVjZXIoKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzZXRFcnJvckhhbmRsZXIoY2I6IEVycm9ySGFuZGxlcikge1xuICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gY2JcbiAgfVxuXG4gIF91cGRhdGVSZWR1Y2VyKCkge1xuICAgIGNvbnN0IG5ld1JlZHVjZXIgPSBjb21iaW5lUmVkdWNlcnModGhpcy5wcm9jZXNzZXMpXG4gICAgdGhpcy5zdG9yZS5yZXBsYWNlUmVkdWNlcihuZXdSZWR1Y2VyKVxuICB9XG5cbiAgX2ludGVybmFsUmVkdWNlcihzdGF0ZTogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9KSB7XG4gICAgcmV0dXJuIHN0YXRlXG4gIH1cblxuICBnZXRTdG9yZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZVxuICB9XG59XG4iXX0=